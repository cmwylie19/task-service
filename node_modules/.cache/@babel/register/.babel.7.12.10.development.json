{
  "{\"sourceRoot\":\"/Users/casewylie/Playground/listio/task-service/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/casewylie/Playground/listio/task-service\",\"filename\":\"/Users/casewylie/Playground/listio/task-service/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/casewylie/Playground/listio/task-service\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/casewylie/Playground/listio/task-service/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/casewylie/Playground/listio/task-service",
      "filename": "/Users/casewylie/Playground/listio/task-service/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/casewylie/Playground/listio/task-service",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/casewylie/Playground/listio/task-service/server.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/casewylie/Playground/listio/task-service/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/casewylie/Playground/listio/task-service/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire(\"dotenv/config\");\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _morgan = _interopRequireDefault(require(\"morgan\"));\n\nvar _controllers = require(\"./controllers\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar PORT = process.env.PORT;\nvar app = (0, _express[\"default\"])();\napp.use((0, _morgan[\"default\"])(\"dev\"));\napp.use(_bodyParser[\"default\"].json());\napp.use(_bodyParser[\"default\"].urlencoded({\n  extended: false\n}));\nvar Tasks = [];\napp.get(\"/healthz\", function (req, res) {\n  res.send(\"pong!\");\n});\napp.get(\"/:id\", function (req, res) {\n  var id = req.params.id;\n  var result = (0, _controllers.getTaskById)(id, Tasks);\n\n  if (result.hasOwnProperty(\"name\")) {\n    res.status(200).send(\"\".concat(JSON.stringify(result, undefined, 2)));\n  } else {\n    res.status(400).send(result);\n  }\n});\napp.put(\"/:id\", function (req, res) {\n  var id = req.params.id;\n  var _req$body = req.body,\n      complete = _req$body.complete,\n      name = _req$body.name;\n  var result = (0, _controllers.updateTaskById)(id, Tasks, {\n    complete: complete,\n    name: name\n  });\n\n  if (Array.isArray(result)) {\n    Tasks = result;\n    res.status(200).send(\"Task with \".concat(id, \" updated\"));\n  } else {\n    res.status(400).send(result);\n  }\n});\napp[\"delete\"](\"/:id\", function (req, res) {\n  var id = req.params.id;\n  var result = (0, _controllers.deleteTaskById)(id, Tasks);\n\n  if (Array.isArray(result)) {\n    Tasks = result;\n    res.status(200).send(\"Task with \".concat(id, \" deleted\"));\n  } else {\n    res.status(400).send(result);\n  }\n});\napp.post(\"/create\", function (req, res) {\n  var name = req.body.name;\n  var result = (0, _controllers.createTask)(name, Tasks);\n\n  if (Array.isArray(result)) {\n    Tasks = result;\n    var temp = Tasks.filter(function (task) {\n      return task.name == name;\n    })[0];\n    res.status(201).send(\"Created\" + JSON.stringify(temp, undefined, 2));\n  } else {\n    res.status(400).send(result);\n  }\n});\napp.get(\"/\", function (req, res) {\n  res.status(200).send(Tasks);\n});\napp.listen(PORT, function () {\n  return console.log(\"Listening on port \".concat(PORT, \"!\"));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJQT1JUIiwicHJvY2VzcyIsImVudiIsImFwcCIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwiVGFza3MiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kIiwiaWQiLCJwYXJhbXMiLCJyZXN1bHQiLCJoYXNPd25Qcm9wZXJ0eSIsInN0YXR1cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiLCJwdXQiLCJib2R5IiwiY29tcGxldGUiLCJuYW1lIiwiQXJyYXkiLCJpc0FycmF5IiwicG9zdCIsInRlbXAiLCJmaWx0ZXIiLCJ0YXNrIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQUVRQSxJLEdBQVNDLE9BQU8sQ0FBQ0MsRyxDQUFqQkYsSTtBQUNSLElBQUlHLEdBQUcsR0FBRywwQkFBVjtBQUVBQSxHQUFHLENBQUNDLEdBQUosQ0FBUSx3QkFBTyxLQUFQLENBQVI7QUFDQUQsR0FBRyxDQUFDQyxHQUFKLENBQVFDLHVCQUFXQyxJQUFYLEVBQVI7QUFDQUgsR0FBRyxDQUFDQyxHQUFKLENBQVFDLHVCQUFXRSxVQUFYLENBQXNCO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQXRCLENBQVI7QUFFQSxJQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUNBTixHQUFHLENBQUNPLEdBQUosQ0FBUSxVQUFSLEVBQW9CLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ2hDQSxFQUFBQSxHQUFHLENBQUNDLElBQUosQ0FBUyxPQUFUO0FBQ0QsQ0FGRDtBQUlBVixHQUFHLENBQUNPLEdBQUosQ0FBUSxNQUFSLEVBQWdCLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQUEsTUFDcEJFLEVBRG9CLEdBQ2JILEdBQUcsQ0FBQ0ksTUFEUyxDQUNwQkQsRUFEb0I7QUFFNUIsTUFBTUUsTUFBTSxH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SixDQUFXLEdBQVgsRUFBZ0JMLElBQWhCLENBQXFCRyxNQUFyQjtBQUNEO0FBQ0YsQ0FWRDtBQVlBYixHQUFHLENBQUNPLEdBQUosQ0FBUSxHQUFSLEVBQWEsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDekJBLEVBQUFBLEdBQUcsQ0FBQ00sTUFBSixDQUFXLEdBQVgsRUFBZ0JMLElBQWhCLENBQXFCSixLQUFyQjtBQUNELENBRkQ7QUFJQU4sR0FBRyxDQUFDNkIsTUFBSixDQUFXaEMsSUFBWCxFQUFpQjtBQUFBLFNBQU1pQyxPQUFPLENBQUNDLEdBQVIsNkJBQWlDbEMsSUFBakMsT0FBTjtBQUFBLENBQWpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9jYXNld3lsaWUvUGxheWdyb3VuZC9saXN0aW8vdGFzay1zZXJ2aWNlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcImRvdGVudi9jb25maWdcIjtcbmltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIm1vcmdhblwiO1xuaW1wb3J0IHsgZGVsZXRlVGFza0J5SWQsIGdldFRhc2tCeUlkLCB1cGRhdGVUYXNrQnlJZCwgY3JlYXRlVGFza30gZnJvbSBcIi4vY29udHJvbGxlcnNcIlxuXG5jb25zdCB7IFBPUlQgfSA9IHByb2Nlc3MuZW52O1xudmFyIGFwcCA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZShsb2dnZXIoXCJkZXZcIikpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG5cbnZhciBUYXNrcyA9IFtdO1xuYXBwLmdldChcIi9oZWFsdGh6XCIsIChyZXEsIHJlcykgPT4ge1xuICByZXMuc2VuZChcInBvbmchXCIpO1xufSk7XG5cbmFwcC5nZXQoXCIvOmlkXCIsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICBjb25zdCByZXN1bHQgPSBnZXRUYXNrQnlJZChpZCwgVGFza3MpXG4gIFxuICBpZiAocmVzdWx0Lmhhc093blByb3BlcnR5KFwibmFtZVwiKSkge1xuICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCwgdW5kZWZpbmVkLCAyKX1gKTtcbiAgfSBlbHNlIHtcbiAgICByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXN1bHQpO1xuICB9XG59KTtcblxuYXBwLnB1dChcIi86aWRcIiwgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gIGNvbnN0IHsgY29tcGxldGUsIG5hbWUgfSA9IHJlcS5ib2R5O1xuXG4gIGNvbnN0IHJlc3VsdCA9IHVwZGF0ZVRhc2tCeUlkKGlkLFRhc2tzLCB7Y29tcGxldGUsbmFtZX0pXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgIFRhc2tzID0gcmVzdWx0O1xuICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGBUYXNrIHdpdGggJHtpZH0gdXBkYXRlZGApO1xuICB9IGVsc2Uge1xuICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKHJlc3VsdCk7XG4gIH1cbn0pO1xuXG5hcHAuZGVsZXRlKFwiLzppZFwiLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgY29uc3QgcmVzdWx0ID0gZGVsZXRlVGFza0J5SWQoaWQsIFRhc2tzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgIFRhc2tzID0gcmVzdWx0O1xuICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGBUYXNrIHdpdGggJHtpZH0gZGVsZXRlZGApO1xuICB9IGVsc2Uge1xuICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKHJlc3VsdCk7XG4gIH1cbn0pO1xuXG5hcHAucG9zdChcIi9jcmVhdGVcIiwgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHsgbmFtZSB9ID0gcmVxLmJvZHk7XG4gIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZVRhc2sobmFtZSwgVGFza3MpO1xuICBpZihBcnJheS5pc0FycmF5KHJlc3VsdCkpe1xuICAgIFRhc2tzID0gcmVzdWx0O1xuICAgIGNvbnN0IHRlbXAgPSBUYXNrcy5maWx0ZXIodGFzaz0+dGFzay5uYW1lPT1uYW1lKVswXVxuICAgIHJlcy5zdGF0dXMoMjAxKS5zZW5kKFwiQ3JlYXRlZFwiICsgSlNPTi5zdHJpbmdpZnkodGVtcCwgdW5kZWZpbmVkLCAyKSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzLnN0YXR1cyg0MDApLnNlbmQocmVzdWx0KVxuICB9XG59KTtcblxuYXBwLmdldChcIi9cIiwgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zdGF0dXMoMjAwKS5zZW5kKFRhc2tzKTtcbn0pO1xuXG5hcHAubGlzdGVuKFBPUlQsICgpID0+IGNvbnNvbGUubG9nKGBMaXN0ZW5pbmcgb24gcG9ydCAke1BPUlR9IWApKTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "PORT",
        "process",
        "env",
        "app",
        "use",
        "bodyParser",
        "json",
        "urlencoded",
        "extended",
        "Tasks",
        "get",
        "req",
        "res",
        "send",
        "id",
        "params",
        "result",
        "hasOwnProperty",
        "status",
        "JSON",
        "stringify",
        "undefined",
        "put",
        "body",
        "complete",
        "name",
        "Array",
        "isArray",
        "post",
        "temp",
        "filter",
        "task",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/casewylie/Playground/listio/task-service/",
      "sourcesContent": [
        "import \"dotenv/config\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport logger from \"morgan\";\nimport { deleteTaskById, getTaskById, updateTaskById, createTask} from \"./controllers\"\n\nconst { PORT } = process.env;\nvar app = express();\n\napp.use(logger(\"dev\"));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\nvar Tasks = [];\napp.get(\"/healthz\", (req, res) => {\n  res.send(\"pong!\");\n});\n\napp.get(\"/:id\", (req, res) => {\n  const { id } = req.params;\n  const result = getTaskById(id, Tasks)\n  \n  if (result.hasOwnProperty(\"name\")) {\n    res.status(200).send(`${JSON.stringify(result, undefined, 2)}`);\n  } else {\n    res.status(400).send(result);\n  }\n});\n\napp.put(\"/:id\", (req, res) => {\n  const { id } = req.params;\n  const { complete, name } = req.body;\n\n  const result = updateTaskById(id,Tasks, {complete,name})\n\n  if (Array.isArray(result)) {\n    Tasks = result;\n    res.status(200).send(`Task with ${id} updated`);\n  } else {\n    res.status(400).send(result);\n  }\n});\n\napp.delete(\"/:id\", (req, res) => {\n  const { id } = req.params;\n  const result = deleteTaskById(id, Tasks);\n  if (Array.isArray(result)) {\n    Tasks = result;\n    res.status(200).send(`Task with ${id} deleted`);\n  } else {\n    res.status(400).send(result);\n  }\n});\n\napp.post(\"/create\", (req, res) => {\n  const { name } = req.body;\n  const result = createTask(name, Tasks);\n  if(Array.isArray(result)){\n    Tasks = result;\n    const temp = Tasks.filter(task=>task.name==name)[0]\n    res.status(201).send(\"Created\" + JSON.stringify(temp, undefined, 2));\n  } else {\n    res.status(400).send(result)\n  }\n});\n\napp.get(\"/\", (req, res) => {\n  res.status(200).send(Tasks);\n});\n\napp.listen(PORT, () => console.log(`Listening on port ${PORT}!`));\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1608681275138
  },
  "{\"sourceRoot\":\"/Users/casewylie/Playground/listio/task-service/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/casewylie/Playground/listio/task-service\",\"filename\":\"/Users/casewylie/Playground/listio/task-service/controllers.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/casewylie/Playground/listio/task-service\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/casewylie/Playground/listio/task-service/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/casewylie/Playground/listio/task-service",
      "filename": "/Users/casewylie/Playground/listio/task-service/controllers.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/casewylie/Playground/listio/task-service",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/casewylie/Playground/listio/task-service/controllers.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/casewylie/Playground/listio/task-service/controllers.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/casewylie/Playground/listio/task-service/",
        "sourceFileName": "controllers.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteTaskById = exports.updateTaskById = exports.createTask = exports.getTaskById = void 0;\n\nvar _uid = require(\"uid\");\n\nvar getTaskById = function getTaskById(id, Tasks) {\n  var ids = Tasks.map(function (task) {\n    return task.id;\n  });\n\n  if (ids.includes(id)) {\n    return Tasks.filter(function (task) {\n      return task.id == id;\n    })[0];\n  } else {\n    return \"Task with id \".concat(id, \" not found\");\n  }\n};\n\nexports.getTaskById = getTaskById;\n\nvar createTask = function createTask(name, Tasks) {\n  var names = Tasks.map(function (task) {\n    return task.name;\n  });\n\n  if (name && !names.includes(name)) {\n    var temp = {\n      id: (0, _uid.uid)(),\n      name: name,\n      complete: false\n    };\n    Tasks.push(temp);\n    return Tasks;\n  } else if (names.includes(name)) {\n    return \"Task with same name already exists\";\n  }\n};\n\nexports.createTask = createTask;\n\nvar updateTaskById = function updateTaskById(id, Tasks, _ref) {\n  var complete = _ref.complete,\n      name = _ref.name;\n  var ids = Tasks.map(function (task) {\n    return task.id;\n  });\n\n  if (ids.includes(id)) {\n    return Tasks.map(function (task) {\n      if (task.id == id) {\n        task.complete = complete;\n        task.name = name;\n      }\n\n      return task;\n    });\n  } else {\n    return \"Task with id \".concat(id, \" not found\");\n  }\n};\n\nexports.updateTaskById = updateTaskById;\n\nvar deleteTaskById = function deleteTaskById(id, Tasks) {\n  var ids = Tasks.map(function (task) {\n    return task.id;\n  });\n\n  if (ids.includes(id)) {\n    return Tasks.filter(function (task) {\n      return task.id !== id;\n    });\n  } else {\n    return \"Task with id \".concat(id, \" not found\");\n  }\n};\n\nexports.deleteTaskById = deleteTaskById;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzLmpzIl0sIm5hbWVzIjpbImdldFRhc2tCeUlkIiwiaWQiLCJUYXNrcyIsImlkcyIsIm1hcCIsInRhc2siLCJpbmNsdWRlcyIsImZpbHRlciIsImNyZWF0ZVRhc2siLCJuYW1lIiwibmFtZXMiLCJ0ZW1wIiwiY29tcGxldGUiLCJwdXNoIiwidXBkYXRlVGFza0J5SWQiLCJkZWxldGVUYXNrQnlJZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVPLElBQU1BLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNDLEVBQUQsRUFBS0MsS0FBTCxFQUFlO0FBQ3hDLE1BQUlDLEdBQUcsR0FBR0QsS0FBSyxDQUFDRSxHQUFOLENBQVUsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLElBQUksQ0FBQ0osRUFBZjtBQUFBLEdBQVYsQ0FBVjs7QUFDQSxNQUFJRSxHQUFHLENBQUNHLFFBQUosQ0FBYUwsRUFBYixDQUFKLEVBQXNCO0FBQ3BCLFdBQU9DLEtBQUssQ0FBQ0ssTUFBTixDQUFhLFVBQUNGLElBQUQ7QUFBQSxhQUFVQSxJQUFJLENBQUNKLEVBQUwsSUFBV0EsRUFBckI7QUFBQSxLQUFiLEVBQXNDLENBQXRDLENBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxrQ0FBdUJBLEVBQXZCO0FBQ0Q7QUFDRixDQVBNOzs7O0FBUUEsSUFBTU8sVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0MsSUFBRCxFQUFNUCxLQUFOLEVBQWlCO0FBQ3pDLE1BQUlRLEtBQUssR0FBR1IsS0FBSyxDQUFDRSxHQUFOLENBQVUsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLElBQUksQ0FBQ0ksSUFBZjtBQUFBLEdBQVYsQ0FBWjs7QUFDQSxNQUFJQSxJQUFJLElBQUksQ0FBQ0MsS0FBSyxDQUFDSixRQUFOLENBQWVHLElBQWYsQ0FBYixFQUFtQztBQUNqQyxRQUFJRSxJQUFJLEdBQUc7QUFBRVYsTUFBQUEsRUFBRSxFQUFFLGVBQU47QUFBYVEsTUFBQUEsSUFBSSxFQUFKQSxJQUFiO0FBQW1CRyxNQUFBQSxRQUFRLEVBQUU7QUFBN0IsS0FBWDtBQUNBVixJQUFBQSxLQUFLLENBQUNXLElBQU4sQ0FBV0YsSUFBWDtBQUNBLFdBQU9ULEtBQVA7QUFDRCxHQUpELE1BSU8sSUFBSVEsS0FBSyxDQUFDSixRQUFOLENBQWVHLElBQWYsQ0FBSixFQUEwQjtBQUMvQixXQUFPLG9DQUFQO0FBQ0Q7QUFDRixDQVRNOzs7O0FBVUEsSUFBTUssY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDYixFQUFELEVBQUtDLEtBQUwsUUFBaUM7QUFBQSxNQUFwQlUsUUFBb0IsUUFBcEJBLFFBQW9CO0FBQUEsTUFBVkgsSUFBVSxRQUFWQSxJQUFVO0FBQzdELE1BQUlOLEdBQUcsR0FBR0QsS0FBSyxDQUFDRSxHQUFOLENBQVUsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLElBQUksQ0FBQ0osRUFBZjtBQUFBLEdBQVYsQ0FBVjs7QUFDQSxNQUFJRSxHQUFHLENBQUNHLFFBQUosQ0FBYUwsRUFBYixDQUFKLEVBQXNCO0FBQ3BCLFdBQU9DLEtBQUssQ0FBQ0UsR0FBTixDQUFVLFVBQUNDLElBQUQsRUFBVTtBQUN6QixVQUFJQSxJQUFJLENBQUNKLEVBQUwsSUFBV0EsRUFBZixFQUFtQjtBQUNqQkksUUFBQUEsSUFBSSxDQUFDTyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBUCxRQUFBQSxJQUFJLENBQUNJLElBQUwsR0FBWUEsSUFBWjtBQUNEOztBQUNELGFBQU9KLElBQVA7QUFDRCxLQU5NLENBQVA7QUFPRCxHQVJELE1BUU87QUFDTCxrQ0FBdUJKLEVBQXZCO0FBQ0Q7QUFDRixDQWJNOzs7O0FBZUEsSUFBTWMsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDZCxFQUFELEVBQUtDLEtBQUwsRUFBZTtBQUMzQyxNQUFJQyxHQUFHLEdBQUdELEtBQUssQ0FBQ0UsR0FBTixDQUFVLFVBQUNDLElBQUQ7QUFBQSxXQUFVQSxJQUFJLENBQUNKLEVBQWY7QUFBQSxHQUFWLENBQVY7O0FBQ0EsTUFBSUUsR0FBRyxDQUFDRyxRQUFKLENBQWFMLEVBQWIsQ0FBSixFQUFzQjtBQUNwQixXQUFPQyxLQUFLLENBQUNLLE1BQU4sQ0FBYSxVQUFDRixJQUFEO0FBQUEsYUFBVUEsSUFBSSxDQUFDSixFQUFMLEtBQVlBLEVBQXRCO0FBQUEsS0FBYixDQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsa0NBQXVCQSxFQUF2QjtBQUNEO0FBQ0YsQ0FQTSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvY2FzZXd5bGllL1BsYXlncm91bmQvbGlzdGlvL3Rhc2stc2VydmljZS8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1aWQgfSBmcm9tIFwidWlkXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRUYXNrQnlJZCA9IChpZCwgVGFza3MpID0+IHtcbiAgbGV0IGlkcyA9IFRhc2tzLm1hcCgodGFzaykgPT4gdGFzay5pZCk7XG4gIGlmIChpZHMuaW5jbHVkZXMoaWQpKSB7XG4gICAgcmV0dXJuIFRhc2tzLmZpbHRlcigodGFzaykgPT4gdGFzay5pZCA9PSBpZClbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGBUYXNrIHdpdGggaWQgJHtpZH0gbm90IGZvdW5kYFxuICB9XG59XG5leHBvcnQgY29uc3QgY3JlYXRlVGFzayA9IChuYW1lLFRhc2tzKSAgPT4ge1xuICBsZXQgbmFtZXMgPSBUYXNrcy5tYXAoKHRhc2spID0+IHRhc2submFtZSk7XG4gIGlmIChuYW1lICYmICFuYW1lcy5pbmNsdWRlcyhuYW1lKSkge1xuICAgIGxldCB0ZW1wID0geyBpZDogdWlkKCksIG5hbWUsIGNvbXBsZXRlOiBmYWxzZSB9O1xuICAgIFRhc2tzLnB1c2godGVtcCk7XG4gICAgcmV0dXJuIFRhc2tzO1xuICB9IGVsc2UgaWYgKG5hbWVzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgcmV0dXJuIFwiVGFzayB3aXRoIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0c1wiO1xuICB9XG59XG5leHBvcnQgY29uc3QgdXBkYXRlVGFza0J5SWQgPSAoaWQsIFRhc2tzLCB7Y29tcGxldGUsIG5hbWV9KSA9PiB7XG4gIGxldCBpZHMgPSBUYXNrcy5tYXAoKHRhc2spID0+IHRhc2suaWQpO1xuICBpZiAoaWRzLmluY2x1ZGVzKGlkKSkge1xuICAgIHJldHVybiBUYXNrcy5tYXAoKHRhc2spID0+IHtcbiAgICAgIGlmICh0YXNrLmlkID09IGlkKSB7XG4gICAgICAgIHRhc2suY29tcGxldGUgPSBjb21wbGV0ZTtcbiAgICAgICAgdGFzay5uYW1lID0gbmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXNrO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgVGFzayB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGA7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlbGV0ZVRhc2tCeUlkID0gKGlkLCBUYXNrcykgPT4ge1xuICBsZXQgaWRzID0gVGFza3MubWFwKCh0YXNrKSA9PiB0YXNrLmlkKTtcbiAgaWYgKGlkcy5pbmNsdWRlcyhpZCkpIHtcbiAgICByZXR1cm4gVGFza3MuZmlsdGVyKCh0YXNrKSA9PiB0YXNrLmlkICE9PSBpZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGBUYXNrIHdpdGggaWQgJHtpZH0gbm90IGZvdW5kYDtcbiAgfVxufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "controllers.js"
      ],
      "names": [
        "getTaskById",
        "id",
        "Tasks",
        "ids",
        "map",
        "task",
        "includes",
        "filter",
        "createTask",
        "name",
        "names",
        "temp",
        "complete",
        "push",
        "updateTaskById",
        "deleteTaskById"
      ],
      "mappings": ";;;;;;;AAAA;;AAEO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAKC,KAAL,EAAe;AACxC,MAAIC,GAAG,GAAGD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACJ,EAAf;AAAA,GAAV,CAAV;;AACA,MAAIE,GAAG,CAACG,QAAJ,CAAaL,EAAb,CAAJ,EAAsB;AACpB,WAAOC,KAAK,CAACK,MAAN,CAAa,UAACF,IAAD;AAAA,aAAUA,IAAI,CAACJ,EAAL,IAAWA,EAArB;AAAA,KAAb,EAAsC,CAAtC,CAAP;AACD,GAFD,MAEO;AACL,kCAAuBA,EAAvB;AACD;AACF,CAPM;;;;AAQA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAMP,KAAN,EAAiB;AACzC,MAAIQ,KAAK,GAAGR,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACI,IAAf;AAAA,GAAV,CAAZ;;AACA,MAAIA,IAAI,IAAI,CAACC,KAAK,CAACJ,QAAN,CAAeG,IAAf,CAAb,EAAmC;AACjC,QAAIE,IAAI,GAAG;AAAEV,MAAAA,EAAE,EAAE,eAAN;AAAaQ,MAAAA,IAAI,EAAJA,IAAb;AAAmBG,MAAAA,QAAQ,EAAE;AAA7B,KAAX;AACAV,IAAAA,KAAK,CAACW,IAAN,CAAWF,IAAX;AACA,WAAOT,KAAP;AACD,GAJD,MAIO,IAAIQ,KAAK,CAACJ,QAAN,CAAeG,IAAf,CAAJ,EAA0B;AAC/B,WAAO,oCAAP;AACD;AACF,CATM;;;;AAUA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACb,EAAD,EAAKC,KAAL,QAAiC;AAAA,MAApBU,QAAoB,QAApBA,QAAoB;AAAA,MAAVH,IAAU,QAAVA,IAAU;AAC7D,MAAIN,GAAG,GAAGD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACJ,EAAf;AAAA,GAAV,CAAV;;AACA,MAAIE,GAAG,CAACG,QAAJ,CAAaL,EAAb,CAAJ,EAAsB;AACpB,WAAOC,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAU;AACzB,UAAIA,IAAI,CAACJ,EAAL,IAAWA,EAAf,EAAmB;AACjBI,QAAAA,IAAI,CAACO,QAAL,GAAgBA,QAAhB;AACAP,QAAAA,IAAI,CAACI,IAAL,GAAYA,IAAZ;AACD;;AACD,aAAOJ,IAAP;AACD,KANM,CAAP;AAOD,GARD,MAQO;AACL,kCAAuBJ,EAAvB;AACD;AACF,CAbM;;;;AAeA,IAAMc,cAAc,GAAG,SAAjBA,cAAiB,CAACd,EAAD,EAAKC,KAAL,EAAe;AAC3C,MAAIC,GAAG,GAAGD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACJ,EAAf;AAAA,GAAV,CAAV;;AACA,MAAIE,GAAG,CAACG,QAAJ,CAAaL,EAAb,CAAJ,EAAsB;AACpB,WAAOC,KAAK,CAACK,MAAN,CAAa,UAACF,IAAD;AAAA,aAAUA,IAAI,CAACJ,EAAL,KAAYA,EAAtB;AAAA,KAAb,CAAP;AACD,GAFD,MAEO;AACL,kCAAuBA,EAAvB;AACD;AACF,CAPM",
      "sourceRoot": "/Users/casewylie/Playground/listio/task-service/",
      "sourcesContent": [
        "import { uid } from \"uid\";\n\nexport const getTaskById = (id, Tasks) => {\n  let ids = Tasks.map((task) => task.id);\n  if (ids.includes(id)) {\n    return Tasks.filter((task) => task.id == id)[0];\n  } else {\n    return `Task with id ${id} not found`\n  }\n}\nexport const createTask = (name,Tasks)  => {\n  let names = Tasks.map((task) => task.name);\n  if (name && !names.includes(name)) {\n    let temp = { id: uid(), name, complete: false };\n    Tasks.push(temp);\n    return Tasks;\n  } else if (names.includes(name)) {\n    return \"Task with same name already exists\";\n  }\n}\nexport const updateTaskById = (id, Tasks, {complete, name}) => {\n  let ids = Tasks.map((task) => task.id);\n  if (ids.includes(id)) {\n    return Tasks.map((task) => {\n      if (task.id == id) {\n        task.complete = complete;\n        task.name = name;\n      }\n      return task;\n    });\n  } else {\n    return `Task with id ${id} not found`;\n  }\n}\n\nexport const deleteTaskById = (id, Tasks) => {\n  let ids = Tasks.map((task) => task.id);\n  if (ids.includes(id)) {\n    return Tasks.filter((task) => task.id !== id);\n  } else {\n    return `Task with id ${id} not found`;\n  }\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1608680302513
  }
}